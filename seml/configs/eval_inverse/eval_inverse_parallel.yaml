# This is the script for Fig. 5 and Fig. 8
# i.e. finding the minimum required clean prediction probability to allow certification
# under adversarial scaling

seml:
  executable: /nfs/homedirs/schuchaj/Programming/pointcloud_invariance_smoothing/seml/scripts/eval_inverse.py
  conda_environment: invariance_smoothing
  project_root_dir: /nfs/homedirs/schuchaj/Programming/pointcloud_invariance_smoothing/
  output_dir: /nfs/homedirs/schuchaj/Programming/pointcloud_invariance_smoothing/logs/slurm_out/eval_inverse
  name: eval_inverse_parallel

slurm:
  experiments_per_job: 1
  sbatch_options:
    mem: 16G          # memory
    cpus-per-task: 8  # num cores
    time: 0-00:10     # max time, D-HH:MM
    partition: ['cpu']
    qos: 'phdcpu'


fixed:

  save_dir: /nfs/staff-ssd/schuchaj/pointcloud_invariance_results/eval_inverse_parallel
  seed: 0

  n_samples_clean: 10000
  n_samples_pert: 10000
  alpha: 0.001

  norms_clean_params:
        linspace: False
        min: 0
        max: 1
        steps: 10

  norms_delta_params:
      linspace: True
      values: [0.05, 0.1, 0.2]
      min: 0
      max: 4
      steps: 401

  inner_cross_params:
      multiple_inner_cross: False
      inner: 1
      cross: 0
      relative_inner_cross: True
      steps_inner: 21
      steps_cross: 21
  
grid:
  sigma:
    type: choice
    options:
      - 0.01
      - 0.05
      - 0.1
      - 0.15
      - 0.2
      - 0.25
      - 0.3
      - 0.4
      - 0.5
      - 0.75
      - 1.0

  norms_clean_params.values:
    type: choice
    options:
      - [0.01]
      - [0.02]
      - [0.03]
      - [0.04]
      - [0.05]
      - [0.06]
      - [0.07]
      - [0.08]
      - [0.09]
      - [0.1]
      - [0.15]
      - [0.175]
      - [0.2]
      - [0.225]
      - [0.25]
      - [0.3]
      - [0.5]
      - [0.6]
      - [0.7]
      - [0.75]
      - [0.8]
      - [0.9]
      - [1]
      - [2]
      - [3]
      - [4]
      - [5]
      - [6]
      - [7]
      - [8]
      - [9]
      - [10]


      